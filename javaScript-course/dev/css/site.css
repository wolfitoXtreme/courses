.fieldRow:after, .field:after, .checkBox:after {
  content: " ";
  display: block;
  clear: both;
  height: 0;
  overflow: hidden;
  visibility: hidden; }

.hide {
  padding: 0 !important;
  margin: 0 !important;
  height: 0;
  width: 0;
  overflow: hidden;
  visibility: hidden;
  display: block;
  position: absolute; }

/*! normalize.css v3.0.1 | MIT License | git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
	 ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11 and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
	 ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
	 ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
	 ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
	 ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
	 ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
	 ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

.fieldRow:after, .field:after, .checkBox:after {
  content: " ";
  display: block;
  clear: both;
  height: 0;
  overflow: hidden;
  visibility: hidden; }

.hide {
  padding: 0 !important;
  margin: 0 !important;
  height: 0;
  width: 0;
  overflow: hidden;
  visibility: hidden;
  display: block;
  position: absolute; }

html {
  height: 100%;
  font: 1em/1.3 arimoRegular, Helvetica, sans-serif; }

body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, figure, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td {
  margin: 0;
  padding: 0;
  border: 0;
  outline: 0;
  font-weight: inherit;
  font-style: inherit;
  font-size: 100%;
  font-family: inherit;
  vertical-align: baseline; }

ol, ul {
  list-style: none; }

blockquote:before, blockquote:after,
q:before, q:after {
  content: ""; }

blockquote, q {
  quotes: "" ""; }

body {
  height: 100%;
  color: #485059;
  background-color: #ffffff; }

/*all elements boxsizing*/
body * {
  box-sizing: border-box;
  -webkit-backface-visibility: hidden;
          backface-visibility: hidden; }

input:link, input:visited, input:hover, input:active, input:focus, textarea:link, textarea:visited, textarea:hover, textarea:active, textarea:focus, button:link, button:visited, button:hover, button:active, button:focus, select:link, select:visited, select:hover, select:active, select:focus, a:link, a:visited, a:hover, a:active, a:focus {
  outline: 0;
  outline-style: none;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0); }

/*HTML5 tags*/
header, section, footer, aside, nav, main, article, figure {
  display: block; }

/*Titles*/
h1, h2, h3, h4, h5 {
  margin: 0.75em 0 0.75em 0.75em;
  font-weight: bold; }

/*strong*/
strong {
  font-weight: bold; }

/*italic*/
em {
  font-style: italic; }

/*readable hide*/
/*Paraghraps*/
p {
  margin: 0.75em 0 0.75em 0.75em;
  font-size: 0.875em;
  line-height: 1.2; }

ul {
  margin: 0.75em 0 0.75em 0.75em; }

/*Lists*/
ul li {
  padding: 0 0 4px calc(8px + 5px);
  font-size: 0.875em;
  line-height: 1.2;
  position: relative; }
  ul li:before {
    content: "";
    left: 0;
    top: 0.31429em;
    width: 0.57143em;
    height: 0.57143em;
    border-radius: 100%;
    display: block;
    position: absolute;
    box-sizing: border-box;
    background-color: #925757; }

ul ul li, ol li ul li, ol.lowerAlpha li ul li {
  padding-left: calc(5px + 3px);
  font-size: 0.85714em;
  line-height: 1.2; }
  ul ul li:before, ol li ul li:before, ol.lowerAlpha li ul li:before {
    width: 0;
    height: 0;
    border-left: 5px solid #768391;
    border-bottom: 5px solid transparent;
    border-top: 5px solid transparent;
    border-radius: 0;
    box-sizing: content-box;
    background-color: transparent;
    top: 0.19286em; }

ul ol li, ol li {
  margin: 0 0 0.125em 0;
  padding: 0em 0.35714em 0.42857em 1.375em;
  font-size: 0.875em;
  line-height: 1.2;
  position: relative;
  background-image: none; }
  ol li:before {
    content: counter(liCounter) ".";
    counter-increment: liCounter;
    left: 0.02em;
    top: 0em;
    font: normal 1.07143em/1.1 opensansExtraBold, Arial, Helvetica, sans-serif;
    color: #768391;
    text-align: right;
    display: block;
    position: absolute; }

ol.lowerAlpha li:before {
  content: counter(liCounter, lower-latin) ".";
  counter-increment: liCounter; }

ul {
  padding-bottom: 0.75em;
  list-style-type: none; }
  ul ul {
    padding: 0 0 0.3125em 0.125em; }

/*Ordered lists*/
ol {
  counter-reset: liCounter; }
  ol ul {
    counter-reset: liCounter; }
  ol li ul li {
    margin: 0; }
  ol.lowerAlpha li ul li {
    margin: 0; }

address {
  font-style: normal; }

/*rulers*/
hr {
  display: none; }

.hr {
  height: 20px;
  display: block;
  clear: both;
  overflow: hidden;
  background-color: #498c7f;
  opacity: 1; }

/*tables*/
table {
  border-collapse: separate;
  border-spacing: 0; }

caption, th, td {
  text-align: left;
  font-weight: normal; }

/*Forms*/
label {
  font: bold 0.8125em/1 robotoRegular, Arial, Helvetica, sans-serif;
  cursor: pointer;
  color: #915857; }

form fieldset {
  border-style: none; }

form fieldset legend {
  display: none; }

input[type=text],
input[type=email],
input[type=date],
input[type=password],
input[type=number],
select,
textarea {
  left: 0;
  padding: 2px 8px 2px 8px;
  height: 32px;
  font: normal 0.875em/1 arimoRegular, Helvetica, sans-serif;
  color: #000000;
  border: 1px solid #d7d7d7;
  border-radius: 4px;
  position: relative;
  background-color: #ffffff;
  transition: background-color 450ms ease-in 0ms, border-color 450ms ease-in 0ms, box-shadow 450ms ease-in 0ms; }
  input[type=text]:hover,
  input[type=email]:hover,
  input[type=date]:hover,
  input[type=password]:hover,
  input[type=number]:hover,
  select:hover,
  textarea:hover {
    border-color: #5e717d; }
  input[type=text]:focus,
  input[type=email]:focus,
  input[type=date]:focus,
  input[type=password]:focus,
  input[type=number]:focus,
  select:focus,
  textarea:focus {
    outline-style: none;
    border-color: #5e717d;
    background-color: #ffffff;
    box-shadow: 2px 2px 2px 0 rgba(0, 0, 0, 0.2); }

select::-ms-expand {
  display: none; }

select option {
  padding: 0 8px 0 8px; }

textarea {
  padding: 6px 8px 6px 8px;
  height: 256px;
  line-height: 1.3;
  display: block;
  resize: none;
  -webkit-appearance: none;
          appearance: none; }

input[type=checkbox] {
  position: relative;
  -webkit-appearance: none;
          appearance: none; }

.checkBox {
  padding-bottom: 4px;
  min-height: 15px;
  display: inline-block;
  position: relative;
  background-color: #000000;
  opacity: 1; }
  .checkBox input[type=checkbox] {
    left: 0;
    top: 0;
    width: 0;
    height: 0;
    opacity: 0;
    border-style: none;
    outline-style: none;
    position: absolute; }
  .checkBox label {
    padding: 0 0 0 20px;
    display: block;
    background-color: #638ae6;
    opacity: 1; }
  .checkBox:before {
    content: "";
    top: -0.07692em;
    width: 15px;
    height: 15px;
    vertical-align: top;
    border: 1px solid #d7d7d7;
    border-radius: 2px;
    display: block;
    box-sizing: border-box;
    overflow: hidden;
    z-index: 10;
    position: absolute;
    background-origin: border-box;
    background-size: 80%;
    transition: background-color 450ms ease-in 0ms, border-color 450ms ease-in 0ms, box-shadow 450ms ease-in 0ms; }
  .checkBox.checked:before {
    background-position: center center;
    overflow: hidden; }
  .checkBox:hover:before {
    border-color: #5e717d; }
  .checkBox.focus:before {
    border-color: #5e717d;
    box-shadow: 2px 2px 2px 0 rgba(0, 0, 0, 0.2); }
  .checkBox:hover:before, .checkBox:focus:hover:before {
    border-color: #5e717d; }

input[type=radio] {
  margin: auto;
  width: auto;
  height: auto;
  border-style: none;
  display: block;
  background: inherit; }

/*Buttons*/
button {
  margin: 4px 0 0 0;
  padding: 0 40px 0 40px;
  width: auto;
  height: 32px;
  font: normal 0.75em/1.1 opensansRegular, Arial, Helvetica, sans-serif;
  text-transform: uppercase;
  color: #ffffff;
  text-decoration: none;
  border-width: 0;
  border-radius: 4px;
  outline: none;
  cursor: pointer;
  display: inline-block;
  position: relative;
  background-color: #5e717d;
  transition: background-color 50mx ease-in 0ms, transform 50mx ease-in 0ms;
  transform: scale(1);
  letter-spacing: -0.018em; }
  button:after {
    content: "";
    right: 0;
    top: 50%;
    display: block;
    position: absolute;
    background-origin: border-box; }
  button span {
    white-space: nowrap;
    display: inline-block;
    overflow: visible;
    visibility: visible;
    background-color: #00fcff;
    opacity: 1; }
  button:hover {
    background-color: #316b90; }
  button:active {
    transform: scale(0.96); }
    button:active span {
      outline-style: none; }
  button::-moz-focus-inner {
    padding: 0;
    border: 0; }
  button.disabled {
    color: rgba(255, 255, 255, 0.5);
    background-color: #cccccc; }

/*Links*/
a:link {
  color: #963c3c; }

a:visited {
  color: #963c3c; }

a:hover, a:active {
  color: #4982b3; }

/*images*/
img {
  display: block; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
