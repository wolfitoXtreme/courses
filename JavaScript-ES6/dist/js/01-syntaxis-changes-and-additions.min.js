(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _objD;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

console.log('======================================================================', '\n  Syntax Changes & Additions', '\n======================================================================');

console.log('----------------------------------------------------------------------', '\n  Let & Block Scope', '\n----------------------------------------------------------------------');

// var, generic variable
var nameA = 'John Doe';
if (true) {
    var nameA = 'Harry Doe';
}
console.log('nameA = ' + nameA); // -> 'Harry Doe', no scope so redefined

// let, Block scoped variable
var nameB = 'John Doe';
if (true) {
    // console.log('nameB = ' + nameB); // -> Will throw error, Uncaught ReferenceError: Cannot access 'nameB' before initialization
    var _nameB = 'Harry Doe';
}
console.log('nameB = ' + nameB); // -> 'John  Doe', not redefined by inner scope

// const, constant, cannot be change
var names = ['John Doe', 'Harry Doe', 'Michael Joe'];
console.log(names);

// arrays and objects are reference types, so it's possible to change their contents (reference) 
names.push('Peter Doe');
console.log(names); // -> ["John Doe", "Harry Doe", "Michael Joe", "Peter Doe"]


console.log('----------------------------------------------------------------------', '\n  Hoisting', '\n----------------------------------------------------------------------');

age = 27; // variable initialization
console.log(age); // -> 27, will work,  as variable is being hoisted
var age; // variable declaration

// color = 'blue';
// console.log(color); // -> Will throw error, ReferenceError: Cannot access 'color' before initialization
// let color;

function doSomething() {
    myNumber = 44; // variable initialization
}

var myNumber = void 0; // variable declaration
doSomething(); // use of the variable
console.log(myNumber); // will work as var is declared before being used


console.log('----------------------------------------------------------------------', '\n  (Fat) Arrow Functions', '\n----------------------------------------------------------------------');

/* 
function  fn() {
    console.log('...logging standard function');
}
*/

// above written as a fat arrow function
var fn = function fn() {
    console.log('...logging fat arrow function');
};
fn();

// simpler version with one line of inner code
var fnB = function fnB() {
    return console.log('...logging fat arrow function');
};
fnB();

// no return keyword needed as only one statement is returned
var fnC = function fnC() {
    return '...logging without return keyword';
};
console.log(fnC());

// no need of parenthesis when just one argument is provided
var fnD = function fnD(argA) {
    return argA + 5;
};
console.log(fnD(2));

setTimeout(function () {
    return console.log('...time out fired');
}, 1000);

console.log('----------------------------------------------------------------------', '\n  (Fat) Arrow Functions and the "this" Keyword', '\n----------------------------------------------------------------------');

var myWindow = undefined;
var buttonA = document.querySelector('.js-button-01');
var buttonB = document.querySelector('.js-button-02');

var fnExampleA = function fnExampleA() {
    return console.log('is window = ' + (myWindow === undefined), 'is button = ' + (buttonA === undefined));
};
function fnExampleB() {
    console.log('is window = ' + (myWindow === this), 'is button = ' + (buttonB === this));
}

fnExampleA(); // -> Arrow function will keep its context, this will be always 'window' as is defined here
fnExampleB(); // -> Normal function will change the context of whatever element triggers it

buttonA.addEventListener('click', fnExampleA);
buttonB.addEventListener('click', fnExampleB);

console.log('----------------------------------------------------------------------', '\n  Functions and Default Parameters', '\n----------------------------------------------------------------------');

// default parameter values, applies also to fat arrow functions
function isEqual(number) {
    var compare = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    return number === compare;
}
console.log(isEqual(0, 0)); // -> true
console.log(isEqual(10)); // -> false

function isEqualB() {
    var number = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
    var compare = arguments[1];

    console.log(number); // -> 10
    console.log(compare); // -> undefined
    return number === compare;
}

console.log(isEqualB(10)); // -> false, is not replacing the default parameter, 
// 10 will be compared to undefined


console.log('----------------------------------------------------------------------', '\n  Object Literal Extensions', '\n----------------------------------------------------------------------');

// standard object declaration
var obj = {
    obj_name: 'John Doe',
    obj_age: 27
};

console.log(obj); // -> {obj_name: "John Doe", obj_age: 27}

// ES6 objects will take values from surrounding values
var obj_name = 'Jane Doe';
var obj_age = 25;

var objB = {
    obj_name: obj_name,
    obj_age: obj_age,
    greet: function greet() {
        console.log('hello ' + this.obj_name + ' ' + this.obj_age);
    }
};
console.log(objB); // {obj_name: "Jane Doe", obj_age: 25, greet: ƒ}
objB.greet();

// ES6 object methods and properties can be defined as strings
var objC = {
    'name': 'Richard Doe',
    'age': 44,
    'greet him': function greetHim() {
        console.log('hello ' + this.name + ' ' + this.age);
    }
};
console.log(objC); // -> {name: "Richard Doe", age: 44, greet him: ƒ}
objC['greet him']();

// ES6 allows to name object properties dynamically
var ageField = 'age';

var objD = (_objD = {
    'name': 'Michael Doe'
}, _defineProperty(_objD, ageField, 32), _defineProperty(_objD, 'greet him', function greetHim() {
    console.log('hello ' + this.name + ' ' + this.age);
}), _objD);
console.log(objD); // -> {name: "Michael Doe", age: 32, greet him: ƒ}
console.log(objD['age']); // -> 32
console.log(objD[ageField]); // -> 32
objD['greet him']();

console.log('----------------------------------------------------------------------', '\n  The Rest operator', '\n----------------------------------------------------------------------');

// the 'rest' operator allows to pass any number of parameters
var numbers = [1, 2, 3, 4, 5];
function sumUp() {
    for (var _len = arguments.length, toAdd = Array(_len), _key = 0; _key < _len; _key++) {
        toAdd[_key] = arguments[_key];
    }

    // '...' are 'rest' operator when used defining the parameters of a function 

    console.log(toAdd);
    var result = 0;
    for (var _i = 0; _i < toAdd.length; _i++) {
        result += toAdd[_i];
    }
    return result;
}

console.log(sumUp.apply(undefined, numbers)); // using 'spread' operator, '...' 
console.log(sumUp(10, 20, 30));

console.log('----------------------------------------------------------------------', '\n  The Spread operator', '\n----------------------------------------------------------------------');

// the 'spread' operator converts an array to a list of values
var moreNumbers = [1, 2, 3, 4, 5];
console.log(Math.max(moreNumbers)); // -> NaN, function expects a list of values, not an Array
console.log(Math.max.apply(Math, moreNumbers)); // -> 5, '...' are 'spread' operator when used sending parameters to a function 


console.log('----------------------------------------------------------------------', '\n  The for-of Loop', '\n----------------------------------------------------------------------');

// the for-of Loop is meant to be used with arrays
var testResults = [1.23, 1.10, 4.1];
var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
    for (var _iterator = testResults[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var restResult = _step.value;

        console.log(restResult);
    }
} catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
} finally {
    try {
        if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
        }
    } finally {
        if (_didIteratorError) {
            throw _iteratorError;
        }
    }
}

console.log('----------------------------------------------------------------------', '\n  Template Literals', '\n----------------------------------------------------------------------');

// Template Literals '``', are strings with extra features
/* 
- allows to add multiline strings
- allows to insert variable values (must be a string) into a string
- to escape expressions use '\'
*/
var anotherName = 'John Doe';
var description = '\nHello ' + (anotherName + '!!!') + '\n${anotherName + \'!!!\'}\nLorem ipsum dolor sit amet \nconsectetur adipisicing elit.\n';

console.log(description);

console.log('----------------------------------------------------------------------', '\n  Destructuring - Arrays', '\n----------------------------------------------------------------------');

var evenMoreNumbers = [1, 2, 3];

// let a = evenMoreNumbers[0];
// let b = evenMoreNumbers[1];

var a = evenMoreNumbers[0],
    b = evenMoreNumbers[1]; // same as above using ES6 destructuring

console.log(a, b); // -> 1 2

var c = evenMoreNumbers[0],
    d = evenMoreNumbers[1],
    e = evenMoreNumbers[2],
    f = evenMoreNumbers[3]; // will assign 'undefined' to non existing value

console.log(c, d, e, f); // -> 1 2 3 undefined

var g = evenMoreNumbers[0],
    h = evenMoreNumbers.slice(1); // 'rest parameter 'will take remaining values as an array, similar to slice or splice methods

console.log(g, h); // -> 1 (2) [2, 3]

var i = evenMoreNumbers[0],
    j = evenMoreNumbers[1],
    k = evenMoreNumbers[2],
    _evenMoreNumbers$ = evenMoreNumbers[3],
    l = _evenMoreNumbers$ === undefined ? 'default' : _evenMoreNumbers$; // is possible to define default values

console.log(i, j, k, l); // -> 1 2 3 "default"

var _evenMoreNumbers$2 = evenMoreNumbers[0],
    m = _evenMoreNumbers$2 === undefined ? 'default' : _evenMoreNumbers$2,
    n = evenMoreNumbers[1],
    o = evenMoreNumbers[2],
    _evenMoreNumbers$3 = evenMoreNumbers[3],
    p = _evenMoreNumbers$3 === undefined ? 'default' : _evenMoreNumbers$3; // default values are replaces in case value actually exist

console.log(m, n, o, p); // -> 1 2 3 "default"

var q = evenMoreNumbers[0],
    r = evenMoreNumbers[2]; // ignoring one value

console.log(q, r); // -> 1 3

var _ref = [1, 2, 3],
    s = _ref[0],
    t = _ref[1]; // destructuring without defining an array

console.log(s, t); // -> 1 2

// is possible to swap variable values
var varA = 1;
var varB = 2;

var _ref2 = [varA, varB];
varB = _ref2[0];
varA = _ref2[1];

console.log(varA); // -> 2
console.log(varB); // -> 1


console.log('----------------------------------------------------------------------', '\n  Destructuring - Objects', '\n----------------------------------------------------------------------');

anotherObj = {
    hisName: 'John Doe',
    hisAge: 27,
    hisGreet: function hisGreet() {
        console.log('Hello!');
    }
};

// Destructuring for Objects is done by key name, not by order as with arrays
var _anotherObj = anotherObj,
    hisName = _anotherObj.hisName,
    hisAge = _anotherObj.hisAge,
    hisGreet = _anotherObj.hisGreet; // variables names have to match key names

console.log(hisName, hisAge, hisGreet); // -> John Doe 27 ƒ hisGreet()...

var _anotherObj2 = anotherObj,
    theName = _anotherObj2.hisName,
    theGreet = _anotherObj2.hisGreet; // is possible to assign other names

console.log(theName, theGreet); // -> John Doe ƒ hisGreet()...
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}]},{},[1])