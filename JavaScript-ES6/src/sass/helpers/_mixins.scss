// 
// mixins
//

// hidden extend wrapper
@mixin hidden($extend: true) {
    @if $extend {
        @extend %hidden;
    } @else {
        width: 0;
        height: 0;
        position: absolute;
        overflow: hidden;
        opacity: 0;
        z-index: -1;
    }
}

// hidden placeholder
%hidden {
    @include hidden($extend: false);
}

// unhidden
@mixin unhidden($extend: true) {
    @if $extend {
        @extend %unhidden;
    } @else {
        width: auto;
        height: auto;
        position: static;
        overflow: visible;
        opacity: 1;
        z-index: auto;
    }
}

// unhidden placeholder
%unhidden {
    @include unhidden($extend: false);
}

// clear fix
@mixin clearFix($extend: true) {
    @if $extend {
        @extend %clearFix;
    } @else {
        &:after {
            content: " ";
            display: block;
            clear: both;
            height: 0;
            overflow: hidden;
            visibility: hidden;
        }
    }
}

// clear fix placeholder
%clearFix {
  @include clearFix($extend: false);
}

// remove text
@mixin remove-text($extend: true) {
    @if $extend {
        @extend %remove-text;
    } @else {
        font-size: 0;
        line-height: 0;
        text-indent: 100%;
        overflow: hidden;
    }
}

// remove text placeholder
%remove-text {
    @include remove-text($extend: false);
}

// no highlight
@mixin no-highlight($extend: true) {
    @if $extend {
        @extend %no-highlight;
    } @else {
        outline: 0;
        outline-style: none;
        -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
    }
}

// remove text placeholder
%no-highlight {
    @include no-highlight($extend: false);
}

// transitions
@mixin transitions($duration, $timingFunction, $delay, $properties:all){
    
    $propsAndTime: ();
    
    @each $prop in $properties {
        
        $prop: $prop;
        
        $propsAndTime: append($propsAndTime, ($prop $duration $timingFunction $delay), comma);
    }
    
    transition: $propsAndTime;
}